/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bcsdk.CounterPartySettleInfo', null, global);
goog.exportSymbol('proto.bcsdk.CrossTxSettlementToWatch', null, global);
goog.exportSymbol('proto.bcsdk.DbValue', null, global);
goog.exportSymbol('proto.bcsdk.Schedules', null, global);
goog.exportSymbol('proto.bcsdk.SettleSchedule', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bcsdk.DbValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bcsdk.DbValue, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bcsdk.DbValue.displayName = 'proto.bcsdk.DbValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bcsdk.DbValue.prototype.toObject = function(opt_includeInstance) {
  return proto.bcsdk.DbValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bcsdk.DbValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.DbValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isNative: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bcsdk.DbValue}
 */
proto.bcsdk.DbValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bcsdk.DbValue;
  return proto.bcsdk.DbValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bcsdk.DbValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bcsdk.DbValue}
 */
proto.bcsdk.DbValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bcsdk.DbValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bcsdk.DbValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bcsdk.DbValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.DbValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsNative();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.bcsdk.DbValue.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bcsdk.DbValue.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bcsdk.DbValue.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.bcsdk.DbValue.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.bcsdk.DbValue.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.bcsdk.DbValue.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.bcsdk.DbValue.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.bcsdk.DbValue.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_native = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bcsdk.DbValue.prototype.getIsNative = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.bcsdk.DbValue.prototype.setIsNative = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bcsdk.CounterPartySettleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bcsdk.CounterPartySettleInfo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bcsdk.CounterPartySettleInfo.displayName = 'proto.bcsdk.CounterPartySettleInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bcsdk.CounterPartySettleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bcsdk.CounterPartySettleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bcsdk.CounterPartySettleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.CounterPartySettleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    settled: jspb.Message.getFieldWithDefault(msg, 1, false),
    txHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    outputIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sendsAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    scheduled: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bcsdk.CounterPartySettleInfo}
 */
proto.bcsdk.CounterPartySettleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bcsdk.CounterPartySettleInfo;
  return proto.bcsdk.CounterPartySettleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bcsdk.CounterPartySettleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bcsdk.CounterPartySettleInfo}
 */
proto.bcsdk.CounterPartySettleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSettled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsAddress(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScheduled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bcsdk.CounterPartySettleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bcsdk.CounterPartySettleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bcsdk.CounterPartySettleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.CounterPartySettleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSendsAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScheduled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool settled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bcsdk.CounterPartySettleInfo.prototype.getSettled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.bcsdk.CounterPartySettleInfo.prototype.setSettled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.bcsdk.CounterPartySettleInfo.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bcsdk.CounterPartySettleInfo.prototype.setTxHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 output_index = 3;
 * @return {number}
 */
proto.bcsdk.CounterPartySettleInfo.prototype.getOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.bcsdk.CounterPartySettleInfo.prototype.setOutputIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sends_address = 4;
 * @return {string}
 */
proto.bcsdk.CounterPartySettleInfo.prototype.getSendsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.bcsdk.CounterPartySettleInfo.prototype.setSendsAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool scheduled = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bcsdk.CounterPartySettleInfo.prototype.getScheduled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.bcsdk.CounterPartySettleInfo.prototype.setScheduled = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bcsdk.CrossTxSettlementToWatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bcsdk.CrossTxSettlementToWatch.repeatedFields_, null);
};
goog.inherits(proto.bcsdk.CrossTxSettlementToWatch, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bcsdk.CrossTxSettlementToWatch.displayName = 'proto.bcsdk.CrossTxSettlementToWatch';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bcsdk.CrossTxSettlementToWatch.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.toObject = function(opt_includeInstance) {
  return proto.bcsdk.CrossTxSettlementToWatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bcsdk.CrossTxSettlementToWatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.CrossTxSettlementToWatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    settleEndsAt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    takerSettleInfoList: jspb.Message.toObjectList(msg.getTakerSettleInfoList(),
    proto.bcsdk.CounterPartySettleInfo.toObject, includeInstance),
    makerSettleInfoList: jspb.Message.toObjectList(msg.getMakerSettleInfoList(),
    proto.bcsdk.CounterPartySettleInfo.toObject, includeInstance),
    shift: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bcsdk.CrossTxSettlementToWatch}
 */
proto.bcsdk.CrossTxSettlementToWatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bcsdk.CrossTxSettlementToWatch;
  return proto.bcsdk.CrossTxSettlementToWatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bcsdk.CrossTxSettlementToWatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bcsdk.CrossTxSettlementToWatch}
 */
proto.bcsdk.CrossTxSettlementToWatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSettleEndsAt(value);
      break;
    case 2:
      var value = new proto.bcsdk.CounterPartySettleInfo;
      reader.readMessage(value,proto.bcsdk.CounterPartySettleInfo.deserializeBinaryFromReader);
      msg.addTakerSettleInfo(value);
      break;
    case 3:
      var value = new proto.bcsdk.CounterPartySettleInfo;
      reader.readMessage(value,proto.bcsdk.CounterPartySettleInfo.deserializeBinaryFromReader);
      msg.addMakerSettleInfo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bcsdk.CrossTxSettlementToWatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bcsdk.CrossTxSettlementToWatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.CrossTxSettlementToWatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettleEndsAt();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTakerSettleInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bcsdk.CounterPartySettleInfo.serializeBinaryToWriter
    );
  }
  f = message.getMakerSettleInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bcsdk.CounterPartySettleInfo.serializeBinaryToWriter
    );
  }
  f = message.getShift();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 settle_ends_at = 1;
 * @return {number}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.getSettleEndsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.bcsdk.CrossTxSettlementToWatch.prototype.setSettleEndsAt = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated CounterPartySettleInfo taker_settle_info = 2;
 * @return {!Array<!proto.bcsdk.CounterPartySettleInfo>}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.getTakerSettleInfoList = function() {
  return /** @type{!Array<!proto.bcsdk.CounterPartySettleInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bcsdk.CounterPartySettleInfo, 2));
};


/** @param {!Array<!proto.bcsdk.CounterPartySettleInfo>} value */
proto.bcsdk.CrossTxSettlementToWatch.prototype.setTakerSettleInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bcsdk.CounterPartySettleInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bcsdk.CounterPartySettleInfo}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.addTakerSettleInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bcsdk.CounterPartySettleInfo, opt_index);
};


proto.bcsdk.CrossTxSettlementToWatch.prototype.clearTakerSettleInfoList = function() {
  this.setTakerSettleInfoList([]);
};


/**
 * repeated CounterPartySettleInfo maker_settle_info = 3;
 * @return {!Array<!proto.bcsdk.CounterPartySettleInfo>}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.getMakerSettleInfoList = function() {
  return /** @type{!Array<!proto.bcsdk.CounterPartySettleInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bcsdk.CounterPartySettleInfo, 3));
};


/** @param {!Array<!proto.bcsdk.CounterPartySettleInfo>} value */
proto.bcsdk.CrossTxSettlementToWatch.prototype.setMakerSettleInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bcsdk.CounterPartySettleInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bcsdk.CounterPartySettleInfo}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.addMakerSettleInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bcsdk.CounterPartySettleInfo, opt_index);
};


proto.bcsdk.CrossTxSettlementToWatch.prototype.clearMakerSettleInfoList = function() {
  this.setMakerSettleInfoList([]);
};


/**
 * optional int64 shift = 4;
 * @return {number}
 */
proto.bcsdk.CrossTxSettlementToWatch.prototype.getShift = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bcsdk.CrossTxSettlementToWatch.prototype.setShift = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bcsdk.SettleSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bcsdk.SettleSchedule, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bcsdk.SettleSchedule.displayName = 'proto.bcsdk.SettleSchedule';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bcsdk.SettleSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.bcsdk.SettleSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bcsdk.SettleSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.SettleSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrFrom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addrTo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bridgedChain: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bcHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bridgedChainHash: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bcsdk.SettleSchedule}
 */
proto.bcsdk.SettleSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bcsdk.SettleSchedule;
  return proto.bcsdk.SettleSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bcsdk.SettleSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bcsdk.SettleSchedule}
 */
proto.bcsdk.SettleSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgedChain(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBcHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgedChainHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bcsdk.SettleSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bcsdk.SettleSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bcsdk.SettleSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.SettleSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddrTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBridgedChain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBcHeight();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBridgedChainHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string addr_from = 1;
 * @return {string}
 */
proto.bcsdk.SettleSchedule.prototype.getAddrFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.bcsdk.SettleSchedule.prototype.setAddrFrom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string addr_to = 2;
 * @return {string}
 */
proto.bcsdk.SettleSchedule.prototype.getAddrTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.bcsdk.SettleSchedule.prototype.setAddrTo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bridged_chain = 3;
 * @return {string}
 */
proto.bcsdk.SettleSchedule.prototype.getBridgedChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.bcsdk.SettleSchedule.prototype.setBridgedChain = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 bc_height = 4;
 * @return {number}
 */
proto.bcsdk.SettleSchedule.prototype.getBcHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.bcsdk.SettleSchedule.prototype.setBcHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string bridged_chain_hash = 5;
 * @return {string}
 */
proto.bcsdk.SettleSchedule.prototype.getBridgedChainHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.bcsdk.SettleSchedule.prototype.setBridgedChainHash = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bcsdk.Schedules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bcsdk.Schedules.repeatedFields_, null);
};
goog.inherits(proto.bcsdk.Schedules, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bcsdk.Schedules.displayName = 'proto.bcsdk.Schedules';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bcsdk.Schedules.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bcsdk.Schedules.prototype.toObject = function(opt_includeInstance) {
  return proto.bcsdk.Schedules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bcsdk.Schedules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.Schedules.toObject = function(includeInstance, msg) {
  var f, obj = {
    schedulesList: jspb.Message.toObjectList(msg.getSchedulesList(),
    proto.bcsdk.SettleSchedule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bcsdk.Schedules}
 */
proto.bcsdk.Schedules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bcsdk.Schedules;
  return proto.bcsdk.Schedules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bcsdk.Schedules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bcsdk.Schedules}
 */
proto.bcsdk.Schedules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bcsdk.SettleSchedule;
      reader.readMessage(value,proto.bcsdk.SettleSchedule.deserializeBinaryFromReader);
      msg.addSchedules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bcsdk.Schedules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bcsdk.Schedules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bcsdk.Schedules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bcsdk.Schedules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchedulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bcsdk.SettleSchedule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SettleSchedule schedules = 1;
 * @return {!Array<!proto.bcsdk.SettleSchedule>}
 */
proto.bcsdk.Schedules.prototype.getSchedulesList = function() {
  return /** @type{!Array<!proto.bcsdk.SettleSchedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bcsdk.SettleSchedule, 1));
};


/** @param {!Array<!proto.bcsdk.SettleSchedule>} value */
proto.bcsdk.Schedules.prototype.setSchedulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bcsdk.SettleSchedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bcsdk.SettleSchedule}
 */
proto.bcsdk.Schedules.prototype.addSchedules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bcsdk.SettleSchedule, opt_index);
};


proto.bcsdk.Schedules.prototype.clearSchedulesList = function() {
  this.setSchedulesList([]);
};


goog.object.extend(exports, proto.bcsdk);
